def window():
    return None

def groupby():
    return None

def algorithm(event):
    critical_ports = [3389, 445]  # RDP, SMB
    if event.get("event_action") == "exploit" and int(event.get("destination_port")) in critical_ports:
        return 1.0  # High priority on exploit detected on critical ports
    return 0.0

def context(event_data):
   return "An exploit attempt was detected on critical ports. The action was flagged as 'exploit' on port " + event_data.get('destination_port') + " (RDP 3389 or SMB 445), commonly targeted for unauthorized access or remote code execution. The attempt originated from IP " + event_data.get('source_ip') + ", marking it as a high-priority event requiring immediate investigation." 


def criticality():
    return "CRITICAL"


def tactic():
    return "Execution (TA0002)"
 

def technique():
    return "Exploitation of Remote Services (T1210)"


def entity(event):
    return {"derived": False, "value": event.get("source_ip"), "type": "ipaddress"}


def artifacts():
    try:
        return stats.collect(
            [
                "applicationname",
                "source_ip",
                "destination_port",
                "destination_ip",
                "source_hostname"
            ]
        )
    except Exception as e:
        raise e